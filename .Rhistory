yelp_names_final
data_frame_data = data.frame(yelp_names_final)
#install.packages("rvest")
library(rvest)
yelp_link = "https://www.yelp.ca/search?find_desc=Restaurants&find_loc=Montreal%2C+QC&ns=1"
yelp_names_html = read_html(yelp_link)
yelp_names_html = html_nodes(yelp_names_html, "#super-container .js-analytics-click span")
yelp_names_text = html_text(yelp_names_html)
yelp_names_final = yelp_names_text[2:11]
address = html_nodes(webpage, 'address')
address_clean = html_text(address)
address_clean = gsub("\n","", address_clean)
address_clean_trimmed = trimws(address_clean)
final_address = address_clean_trimmed[2:11]
phone = html_nodes(webpage, '.biz-phone')
phone_clean = html_text(phone)
phone_clean = gsub("\n","", phone_clean)
phone_clean_trimmed = trimws(phone_clean)
final_phone = phone_clean_trimmed[2:11]
costs = html_nodes(webpage, '.price-range')
costs_clean = html_text(costs)
costs_clean_trimmed = trimws(costs_clean)
final_costs = costs_clean_trimmed
data_frame_data = data.frame(yelp_names_final, final_address, final_phone, final_costs)
restos_cheap = dplyr::filter(data_frame_data, final_costs == "$$")
View(restos_cheap)
View(data_frame_data)
View(restos_cheap)
library(rvest)
url = ""
webpage = read_html(url)
url="https://weather.gc.ca/city/pages/qc-147_metric_e.html"
webpage = read_html(url)
temp_nodes = html_nodes(".div-column:nth-child(6) .div-row2 .center-block+ .mrgn-bttm-0 , .div-column:nth-child(5) .div-row2 .center-block+ .mrgn-bttm-0 , .div-column:nth-child(4) .div-row2 .center-block+ .mrgn-bttm-0 , .div-column:nth-child(3) .div-row2 .center-block+ .mrgn-bttm-0 , .div-column:nth-child(2) .div-row2 .center-block+ .mrgn-bttm-0")
temp_nodes = html_nodes(webpage, ".div-column:nth-child(6) .div-row2 .center-block+ .mrgn-bttm-0 , .div-column:nth-child(5) .div-row2 .center-block+ .mrgn-bttm-0 , .div-column:nth-child(4) .div-row2 .center-block+ .mrgn-bttm-0 , .div-column:nth-child(3) .div-row2 .center-block+ .mrgn-bttm-0 , .div-column:nth-child(2) .div-row2 .center-block+ .mrgn-bttm-0")
temp_nodes
temp_nodes_day = temp_nodes
temp_nodes_night = html_nodes(webpage, ".div-column+ .div-column .low")
temp_nodes_night
temp_nodes_day
temp_nodes_day = html_nodes(webpage, ".div-column:nth-child(3) .high , .div-column:nth-child(4) .high , .div-column:nth-child(5) .high , .div-column:nth-child(6) .high , .div-column:nth-child(2) .high")
temp_day_txt = html_text(temp_nodes_day)
temp_day_txt
temp_nodes_day = html_nodes(webpage, ".high")
temp_nodes_night = html_nodes(webpage, ".low")
temp_day_txt = html_text(temp_nodes_day)
temp_night_txt = html_text(temp_nodes_night)
View(data_frame_data)
temp_day_txt = temp_day_txt[1:5]
temp_night_txt = temp_night_txt[1:5]
temp_day_txt
temp_night_txt
night_nodes = html_nodes(webpage, ".low")
day_nodes = html_nodes(webpage, ".high")
night_text = html_text(night_nodes)
day_text = html_text(day_nodes)
day_text
day_text_clean = day_text[c(1,3,5,7,9)]
day_text_clean
day_text_clean = gsub("<U+00B0>", "", day_text_clean)
day_text_clean
day_text_clean = gsub("<U+00B0>", " ", day_text_clean)
day_text_clean
day_text_clean = gsub("\n", "", day_text_clean)
day_text_clean
day_text_clean = gsub("<U+00B0>", "", day_text_clean)
day_text_clean
day_text_clean = gsub("<U+00B0>", "", day_text_clean)
day_text_clean
night_text
night_text_clean = night_text[c(3,5,7,9,11)]
night_text_clean = gsub("\n","",night_text_clean)
night_text_clean
night_text_clean
day_text_clean
day_text_clean = gsub("<U+00B0>", "", day_text_clean)
day_text_clean
day_text_clean = gsub("<U+00B0>C", "", day_text_clean)
day_text_clean
day_text_clean = gsub(".<U+00B0>", "", day_text_clean)
day_text_clean
library(rvest)
url="https://weather.gc.ca/city/pages/qc-147_metric_e.html"
webpage = read_html(url)
day_nodes = html_nodes(webpage, ".high")
night_nodes = html_nodes(webpage, ".low")
day_text = html_text(day_nodes)
night_text = html_text(night_nodes)
day_text_clean = day_text[c(1,3,5,7,9)]
night_text_clean = night_text[c(3,5,7,9,11)]
day_text_clean = gsub("\n", "", day_text_clean)
night_text_clean = gsub("\n", "", night_text_clean)
night_text_clean
night_nodes = html_nodes(webpage, ".low")
day_nodes = html_nodes(webpage, ".high")
nick_test = html_text(day_nodes)
nick_test
library(rvest)
url ="https://weather.gc.ca/city/pages/qc-147_metric_e.html"
webpage = read_html(url)
day_temp_html = html_nodes(webpage, ".high")
day_temp_text = html_text(day_temp_html)
day_temp_text
install.packages(rvest)
install.packages("rvest")
install.packages("rvest")
library(rvest)
url ="https://weather.gc.ca/city/pages/qc-147_metric_e.html"
webpage = read_html(url)
day_temp_html = html_nodes(webpage, ".high")
day_temp_text = html_text(day_temp_html)
day_temp_text
day_temp_text_clean = gsub("\\<U+00B0\\>","",day_temp_text)
day_temp_text_clean
day_temp_text_clean = gsub("\n","",day_temp_text)
day_temp_text_clean
day_temp_text_clean = str_replace_all(day_temp_text,"[^[:alnum:]]","")
install.packages("stringr")
install.packages("stringr")
library(stringr)
day_temp_text_clean = str_replace_all(day_temp_text,"[[:punct:]]","")
day_temp_text_clean
day_temp_text_clean = str_replace_all("[[:punct:]]","", day_temp_text)
library(rvest)
yelp_link = "https://www.yelp.ca/search?find_desc=Restaurants&find_loc=Montreal%2C+QC&ns=1"
yelp_names_html = read_html(yelp_link)
yelp_names_html = html_nodes(yelp_names_html, "#super-container .js-analytics-click span")
yelp_names_text = html_text(yelp_names_html)
yelp_names_final = yelp_names_text[2:11]
address = html_nodes(webpage, 'address')
address_clean = html_text(address)
address_clean = gsub("\n","", address_clean)
address_clean_trimmed = trimws(address_clean)
final_address = address_clean_trimmed[2:11]
final_address
phone = html_nodes(webpage, '.biz-phone')
phone_clean = html_text(phone)
phone_clean = gsub("\n","", phone_clean)
phone_clean_trimmed = trimws(phone_clean)
final_phone = phone_clean_trimmed[2:11]
final_phone
costs = html_nodes(webpage, '.price-range')
costs_clean = html_text(costs)
costs_clean_trimmed = trimws(costs_clean)
final_costs = costs_clean_trimmed
final_costs
data_frame_data = data.frame(yelp_names_final, final_address, final_phone, final_costs)
restos_cheap = dplyr::filter(data_frame_data, final_costs == "$$")
View(restos_cheap)
colnames(yelp_names_final) <- c("Restaurant Name","Address","Phone Number","Price Range")
yelp_names_final
colnames(data_frame_data) = ("Restaurant Name", "Address", "Contact", "Costs")
colnames(data_frame_data) = c("Restaurant Name", "Address", "Contact", "Costs")
View(data_frame_data)
restos_cheap
restos_cheap = dplyr::filter(data_frame_data, final_costs == "$$")
View(restos_cheap)
url = "https://weather.gc.ca/city/pages/qc-147_metric_e.html"
webpage=read_html(url)
library(rvest)
library(dplyr)
url = "https://weather.gc.ca/city/pages/qc-147_metric_e.html"
webpage = read_html(url)
day_nodes = html_nodes(webpage, ".high")
day_text = html_text(day_nodes)
day_text
head(day_text)
day_text
day_text = day_text[c(1,3,5,7,9)]
day_text
day_text_clean = gsub("\n", "", day_text)
day_text
day_text_clean
day_text_clean = trimws(day_text_clean)
day_text_clean
night_nodes = html_nodes(webpage, ".low")
night_text = html_text(night_nodes)
night_text = night_text[c(3,5,7,9,11)]
night_text_clean = gsub("\n", "", night_text)
night_text_clean = trimws(night_text_clean)
night_text_clean
date_nodes
date_nodes = html_nodes(webpage, '.div-row1')
date_text = html_text(date_nodes)
date_text
date_text = date_text[2:6]
date_text
date_text_clean = gsub("\n              Fri\n              ", "", date_text)
date_text_clean
date_text_clean = gsub("\n              Fri\n              ", "", date_text)
date_text_clean = gsub("\n              Fri\n              ", "", date_text)
date_text_clean = gsub("\n              Sat\n              ", "", date_text)
date_text_clean = gsub("\n              Sun\n              ", "", date_text)
date_text_clean = gsub("\n              Mon\n              ", "", date_text)
date_text_clean = gsub("\n              Tue\n              ", "", date_text)
date_text_clean = trimws(date_text_clean)
date_text_clean
date_text
data_text_clean = gsub("\n              Fri\n              ","", date_text)
data_text_clean = gsub("\n              Fri\n              ","", date_text_clean)
data_text_clean = gsub("\n              Sat\n              ","", date_text_clean)
date_text_clean
date_text
data_text_clean = gsub("\n              Fri\n              ","", date_text)
date_text_clea
date_text_clean
date_text
date_text_clean = gsub("\n              Fri\n              ","", date_text)
date_text_clean = gsub("\n              Sat\n              ","", date_text_clean)
date_text_clean
date_text_clean = gsub("\n              Sun\n              ","", date_text_clean)
date_text_clean = gsub("\n              Mon\n              ","", date_text_clean)
date_text_clean = gsub("\n              Tue\n              ","", date_text_clean)
date_text_clean
date_text_clean = trimws(date_text_clean)
date_text_clean
night_text_clean
library(rvest)
url = "https://weather.gc.ca/city/pages/qc-147_metric_e.html"
webpage = html_read(url)
webpage = read_html(url)
nodes_daytemp = html_nodes(webpage, ".high")
text_daytemp = html_text(nodes_daytemp)
text_daytemp
nodes_daytemp = html_nodes(webpage, ".div-row2 .center-block+ .mrgn-bttm-0")
text_daytemp = html_nodes(nodes_daytemp)
text_daytemp = html_text(nodes_daytemp)
text_daytemp
gsub("<.*>", "", text_daytemp)
text_daytemp = gsub("<.*>", "", text_daytemp)
text_daytemp
text_daytemp = gsub(".*>", "", text_daytemp)
text_daytemp
test = gsub(".*>", "", text_daytemp)
test
test = gsub("\n", "", text_daytemp)
test
test = gsub("\\<.*\\>", "" ,test)
test
text_daytemp = gsub("\\<.*\\>", "" ,text_daytemp)
text_daytemp
text_daytemp
text_day = html_text(nodes_daytemp)
text_day
text_day = gsub("\\<","",text_day)
text_day
text_day = gsub("\\<U+00B0\\>","",text_day)
text_day
is.data.frame(main_boroughs)
# Goal:
# 1) Analyse hourly and seasonal patterns with respect the collision factors and
#    to possibly figure out the kind of areas that are accident
#    prone in particular circumstances. Then looking at different parameters,
#    suggest ways to reduce accidents
# Some surprising observations:
#    Pedestrian injured/killed number highest
#    Highest number of collisions during afternoon
#
data_set = read.csv("NYC-vehicle-collisions.csv")
data_set = data_set[,-1]
data_set = data_set[,-7]
data_set = data_set[ , -which(names(data_set) %in% c("OFF.STREET.NAME","VEHICLE.2.FACTOR","VEHICLE.3.FACTOR", "VEHICLE.4.FACTOR", "VEHICLE.5.FACTOR","VEHICLE.3.TYPE", "VEHICLE.4.TYPE", "VEHICLE.5.TYPE"))]
main_boroughs = dplyr::filter(data_set, BOROUGH==1 | BOROUGH==2 | BOROUGH==3 | BOROUGH==4 | BOROUGH==5)
main_boroughs = dplyr::mutate(main_boroughs, hour = gsub("^(.*?):.*", "\\1", main_boroughs$TIME))
main_boroughs = dplyr::mutate(main_boroughs, month = substr(main_boroughs$DATE, 1, 2))
all_injured = dplyr::filter(main_boroughs, `PERSONS.INJURED` != 0)
all_killed = dplyr::filter(main_boroughs, `PERSONS.KILLED` != 0)
cyclists = dplyr::filter(main_boroughs, `CYCLISTS.KILLED` != 0 | `CYCLISTS.INJURED` != 0)
cyclists_injured = dplyr::filter(main_boroughs, `CYCLISTS.INJURED` != 0)
cyclists_killed = dplyr::filter(main_boroughs, `CYCLISTS.KILLED` != 0)
motorists = dplyr::filter(main_boroughs, `MOTORISTS.KILLED` != 0 | `MOTORISTS.INJURED` != 0)
motorists_injured = dplyr::filter(main_boroughs, `MOTORISTS.INJURED` != 0)
motorists_killed = dplyr::filter(main_boroughs, `MOTORISTS.KILLED` != 0)
pedestrians = dplyr::filter(main_boroughs, `PEDESTRIANS.KILLED` != 0 | `PEDESTRIANS.INJURED` != 0)
pedestrians_injured = dplyr::filter(main_boroughs, `PEDESTRIANS.INJURED` != 0)
pedestrians_killed = dplyr::filter(main_boroughs, `PEDESTRIANS.KILLED` != 0)
main_boroughs$hour = as.numeric(main_boroughs$hour)
midnight = dplyr::filter(main_boroughs, hour >= 1 & hour <= 6)
morning = dplyr::filter(main_boroughs, hour >= 7 & hour <= 12)
afternoon = dplyr::filter(main_boroughs, hour >= 13 & hour <= 18)
# evening = dplyr::filter(main_boroughs, hour >= 19 & hour <=0)
# didn't work cause the number don't make sense
evening = dplyr::filter(main_boroughs, !(hour >= 1 & hour <= 18))
main_boroughs$month = as.numeric(main_boroughs$month)
temperatures = read.csv("NYC-temperatures.csv")
names(main_boroughs)[names(main_boroughs) == "month"] = "Month"
main_boroughs_temp = dplyr::inner_join(main_boroughs, temperatures, by = "Month")
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, time_of_day = ifelse(hour %in% 0:5, "Midnight",
ifelse(hour %in% 6:12, "Morning",
ifelse(hour %in% 13:18, "Afternoon","Evening"))))
main_boroughs_temp = main_boroughs_temp[ , -which(names(main_boroughs_temp) %in% c("Avg..Precip.","Record.Low", "Record.High"))]
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, season = ifelse(Month %in% 5:8, "Summer",
ifelse(Month %in% 9:11, "Fall","Winter")))
winter = dplyr::filter(main_boroughs_temp, season == 'Winter')
fall = dplyr::filter(main_boroughs_temp, season == 'Fall')
summer = dplyr::filter(main_boroughs_temp, season == 'Summer')
factor_inattention = main_boroughs_temp[ grep("INATTENTION", main_boroughs_temp$VEHICLE.1.FACTOR),]
tmp_distract = main_boroughs_temp[ grep("DISTRACTION", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_inattention = dplyr::union(tmp_distract, factor_inattention)
factor_inattention = dplyr::distinct(factor_inattention)
main_boroughs_temp = dplyr::filter(main_boroughs_temp,
VEHICLE.1.FACTOR == 'ALCOHOL INVOLVEMENT' |
VEHICLE.1.FACTOR == 'BACKING UNSAFELY' |
VEHICLE.1.FACTOR == 'DRIVER INEXPERIENCE' |
VEHICLE.1.FACTOR == 'DRIVER INATTENTION/DISTRACTION' |
VEHICLE.1.FACTOR == 'TURNING IMPROPERLY' |
VEHICLE.1.FACTOR == 'TRAFFIC CONTROL DISREGARDED' |
VEHICLE.1.FACTOR == 'FAILURE TO YIELD RIGHT-OF-WAY' |
VEHICLE.1.FACTOR == 'FATIGUED/DROWSY' |
VEHICLE.1.FACTOR == 'PRESCRIPTION MEDICATION' |
VEHICLE.1.FACTOR == 'LOST CONSCIOUSNESS')
factor_alcohol = main_boroughs_temp[ grep("ALCOHOL", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_backing = main_boroughs_temp[ grep("BACKING", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_inexperience = main_boroughs_temp[ grep("INEXPERIENCE", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_turning = main_boroughs_temp[ grep("TURNING", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_drowsy = main_boroughs_temp[ grep("DROWSY", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_trafficControl = main_boroughs_temp[ grep("TRAFFIC CONTROL", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_medication = main_boroughs_temp[ grep("MEDICATION", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_consciousness = main_boroughs_temp[ grep("CONSCIOUSNESS", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_yield = main_boroughs_temp[ grep("FAILURE TO YIELD", main_boroughs_temp$VEHICLE.1.FACTOR),]
all_injured = dplyr::filter(main_boroughs_temp, `PERSONS.INJURED` != 0)
all_killed = dplyr::filter(main_boroughs_temp, `PERSONS.KILLED` != 0)
cyclists = dplyr::filter(main_boroughs_temp, `CYCLISTS.KILLED` != 0 | `CYCLISTS.INJURED` != 0)
cyclists_injured = dplyr::filter(main_boroughs_temp, `CYCLISTS.INJURED` != 0)
cyclists_killed = dplyr::filter(main_boroughs_temp, `CYCLISTS.KILLED` != 0)
motorists = dplyr::filter(main_boroughs_temp, `MOTORISTS.KILLED` != 0 | `MOTORISTS.INJURED` != 0)
motorists_injured = dplyr::filter(main_boroughs_temp, `MOTORISTS.INJURED` != 0)
motorists_killed = dplyr::filter(main_boroughs_temp, `MOTORISTS.KILLED` != 0)
pedestrians = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.KILLED` != 0 | `PEDESTRIANS.INJURED` != 0)
pedestrians_injured = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.INJURED` != 0)
pedestrians_killed = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.KILLED` != 0)
# library(ggplot2)
# temp_plot_ = ggplot(factor_distraction, aes(VEHICLE.1.FACTOR, PERSONS.KILLED))
# temp_plot_ + geom_point()
getwd()
setwd("/Users/vasu/Desktop/R-stuff/")
data_set = read.csv("NYC-vehicle-collisions.csv")
data_set = data_set[,-1]
data_set = data_set[,-7]
data_set = data_set[ , -which(names(data_set) %in% c("OFF.STREET.NAME","VEHICLE.2.FACTOR","VEHICLE.3.FACTOR", "VEHICLE.4.FACTOR", "VEHICLE.5.FACTOR","VEHICLE.3.TYPE", "VEHICLE.4.TYPE", "VEHICLE.5.TYPE"))]
main_boroughs = dplyr::filter(data_set, BOROUGH==1 | BOROUGH==2 | BOROUGH==3 | BOROUGH==4 | BOROUGH==5)
main_boroughs = dplyr::mutate(main_boroughs, hour = gsub("^(.*?):.*", "\\1", main_boroughs$TIME))
main_boroughs = dplyr::mutate(main_boroughs, month = substr(main_boroughs$DATE, 1, 2))
all_injured = dplyr::filter(main_boroughs, `PERSONS.INJURED` != 0)
all_killed = dplyr::filter(main_boroughs, `PERSONS.KILLED` != 0)
cyclists = dplyr::filter(main_boroughs, `CYCLISTS.KILLED` != 0 | `CYCLISTS.INJURED` != 0)
cyclists_injured = dplyr::filter(main_boroughs, `CYCLISTS.INJURED` != 0)
cyclists_killed = dplyr::filter(main_boroughs, `CYCLISTS.KILLED` != 0)
motorists = dplyr::filter(main_boroughs, `MOTORISTS.KILLED` != 0 | `MOTORISTS.INJURED` != 0)
motorists_injured = dplyr::filter(main_boroughs, `MOTORISTS.INJURED` != 0)
motorists_killed = dplyr::filter(main_boroughs, `MOTORISTS.KILLED` != 0)
pedestrians = dplyr::filter(main_boroughs, `PEDESTRIANS.KILLED` != 0 | `PEDESTRIANS.INJURED` != 0)
pedestrians_injured = dplyr::filter(main_boroughs, `PEDESTRIANS.INJURED` != 0)
pedestrians_killed = dplyr::filter(main_boroughs, `PEDESTRIANS.KILLED` != 0)
main_boroughs$hour = as.numeric(main_boroughs$hour)
midnight = dplyr::filter(main_boroughs, hour >= 1 & hour <= 6)
morning = dplyr::filter(main_boroughs, hour >= 7 & hour <= 12)
afternoon = dplyr::filter(main_boroughs, hour >= 13 & hour <= 18)
# evening = dplyr::filter(main_boroughs, hour >= 19 & hour <=0)
# didn't work cause the number don't make sense
evening = dplyr::filter(main_boroughs, !(hour >= 1 & hour <= 18))
main_boroughs$month = as.numeric(main_boroughs$month)
temperatures = read.csv("NYC-temperatures.csv")
names(main_boroughs)[names(main_boroughs) == "month"] = "Month"
main_boroughs_temp = dplyr::inner_join(main_boroughs, temperatures, by = "Month")
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, time_of_day = ifelse(hour %in% 0:5, "Midnight",
ifelse(hour %in% 6:12, "Morning",
ifelse(hour %in% 13:18, "Afternoon","Evening"))))
main_boroughs_temp = main_boroughs_temp[ , -which(names(main_boroughs_temp) %in% c("Avg..Precip.","Record.Low", "Record.High"))]
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, season = ifelse(Month %in% 5:8, "Summer",
ifelse(Month %in% 9:11, "Fall","Winter")))
winter = dplyr::filter(main_boroughs_temp, season == 'Winter')
fall = dplyr::filter(main_boroughs_temp, season == 'Fall')
summer = dplyr::filter(main_boroughs_temp, season == 'Summer')
factor_inattention = main_boroughs_temp[ grep("INATTENTION", main_boroughs_temp$VEHICLE.1.FACTOR),]
tmp_distract = main_boroughs_temp[ grep("DISTRACTION", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_inattention = dplyr::union(tmp_distract, factor_inattention)
factor_inattention = dplyr::distinct(factor_inattention)
main_boroughs_temp = dplyr::filter(main_boroughs_temp,
VEHICLE.1.FACTOR == 'ALCOHOL INVOLVEMENT' |
VEHICLE.1.FACTOR == 'BACKING UNSAFELY' |
VEHICLE.1.FACTOR == 'DRIVER INEXPERIENCE' |
VEHICLE.1.FACTOR == 'DRIVER INATTENTION/DISTRACTION' |
VEHICLE.1.FACTOR == 'TURNING IMPROPERLY' |
VEHICLE.1.FACTOR == 'TRAFFIC CONTROL DISREGARDED' |
VEHICLE.1.FACTOR == 'FAILURE TO YIELD RIGHT-OF-WAY' |
VEHICLE.1.FACTOR == 'FATIGUED/DROWSY' |
VEHICLE.1.FACTOR == 'PRESCRIPTION MEDICATION' |
VEHICLE.1.FACTOR == 'LOST CONSCIOUSNESS')
factor_alcohol = main_boroughs_temp[ grep("ALCOHOL", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_backing = main_boroughs_temp[ grep("BACKING", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_inexperience = main_boroughs_temp[ grep("INEXPERIENCE", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_turning = main_boroughs_temp[ grep("TURNING", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_drowsy = main_boroughs_temp[ grep("DROWSY", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_trafficControl = main_boroughs_temp[ grep("TRAFFIC CONTROL", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_medication = main_boroughs_temp[ grep("MEDICATION", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_consciousness = main_boroughs_temp[ grep("CONSCIOUSNESS", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_yield = main_boroughs_temp[ grep("FAILURE TO YIELD", main_boroughs_temp$VEHICLE.1.FACTOR),]
all_injured = dplyr::filter(main_boroughs_temp, `PERSONS.INJURED` != 0)
all_killed = dplyr::filter(main_boroughs_temp, `PERSONS.KILLED` != 0)
cyclists = dplyr::filter(main_boroughs_temp, `CYCLISTS.KILLED` != 0 | `CYCLISTS.INJURED` != 0)
cyclists_injured = dplyr::filter(main_boroughs_temp, `CYCLISTS.INJURED` != 0)
cyclists_killed = dplyr::filter(main_boroughs_temp, `CYCLISTS.KILLED` != 0)
motorists = dplyr::filter(main_boroughs_temp, `MOTORISTS.KILLED` != 0 | `MOTORISTS.INJURED` != 0)
motorists_injured = dplyr::filter(main_boroughs_temp, `MOTORISTS.INJURED` != 0)
motorists_killed = dplyr::filter(main_boroughs_temp, `MOTORISTS.KILLED` != 0)
pedestrians = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.KILLED` != 0 | `PEDESTRIANS.INJURED` != 0)
pedestrians_injured = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.INJURED` != 0)
pedestrians_killed = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.KILLED` != 0)
# library(ggplot2)
# library(ggplot2)
# temp_plot_ = ggplot(factor_distraction, aes(VEHICLE.1.FACTOR, PERSONS.KILLED))
# library(ggplot2)
# temp_plot_ = ggplot(factor_distraction, aes(VEHICLE.1.FACTOR, PERSONS.KILLED))
# temp_plot_ + geom_point()
# library(ggplot2)
# temp_plot_ = ggplot(factor_distraction, aes(VEHICLE.1.FACTOR, PERSONS.KILLED))
# temp_plot_ + geom_point()
# library(ggplot2)
# temp_plot_ = ggplot(factor_distraction, aes(VEHICLE.1.FACTOR, PERSONS.KILLED))
# temp_plot_ + geom_point()
data_set = read.csv("NYC-vehicle-collisions.csv")
data_set = data_set[,-1]
data_set = data_set[,-7]
data_set = data_set[ , -which(names(data_set) %in% c("OFF.STREET.NAME","VEHICLE.2.FACTOR","VEHICLE.3.FACTOR", "VEHICLE.4.FACTOR", "VEHICLE.5.FACTOR","VEHICLE.3.TYPE", "VEHICLE.4.TYPE", "VEHICLE.5.TYPE"))]
main_boroughs = dplyr::filter(data_set, BOROUGH==1 | BOROUGH==2 | BOROUGH==3 | BOROUGH==4 | BOROUGH==5)
main_boroughs = dplyr::mutate(main_boroughs, hour = gsub("^(.*?):.*", "\\1", main_boroughs$TIME))
main_boroughs = dplyr::mutate(main_boroughs, month = substr(main_boroughs$DATE, 1, 2))
all_injured = dplyr::filter(main_boroughs, `PERSONS.INJURED` != 0)
all_killed = dplyr::filter(main_boroughs, `PERSONS.KILLED` != 0)
cyclists = dplyr::filter(main_boroughs, `CYCLISTS.KILLED` != 0 | `CYCLISTS.INJURED` != 0)
cyclists_injured = dplyr::filter(main_boroughs, `CYCLISTS.INJURED` != 0)
cyclists_killed = dplyr::filter(main_boroughs, `CYCLISTS.KILLED` != 0)
motorists = dplyr::filter(main_boroughs, `MOTORISTS.KILLED` != 0 | `MOTORISTS.INJURED` != 0)
motorists_injured = dplyr::filter(main_boroughs, `MOTORISTS.INJURED` != 0)
motorists_killed = dplyr::filter(main_boroughs, `MOTORISTS.KILLED` != 0)
pedestrians = dplyr::filter(main_boroughs, `PEDESTRIANS.KILLED` != 0 | `PEDESTRIANS.INJURED` != 0)
pedestrians_injured = dplyr::filter(main_boroughs, `PEDESTRIANS.INJURED` != 0)
pedestrians_killed = dplyr::filter(main_boroughs, `PEDESTRIANS.KILLED` != 0)
main_boroughs$hour = as.numeric(main_boroughs$hour)
midnight = dplyr::filter(main_boroughs, hour >= 1 & hour <= 6)
morning = dplyr::filter(main_boroughs, hour >= 7 & hour <= 12)
afternoon = dplyr::filter(main_boroughs, hour >= 13 & hour <= 18)
# evening = dplyr::filter(main_boroughs, hour >= 19 & hour <=0)
# didn't work cause the number don't make sense
evening = dplyr::filter(main_boroughs, !(hour >= 1 & hour <= 18))
main_boroughs$month = as.numeric(main_boroughs$month)
temperatures = read.csv("NYC-temperatures.csv")
names(main_boroughs)[names(main_boroughs) == "month"] = "Month"
main_boroughs_temp = dplyr::inner_join(main_boroughs, temperatures, by = "Month")
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, time_of_day = ifelse(hour %in% 0:5, "Midnight",
ifelse(hour %in% 6:12, "Morning",
ifelse(hour %in% 13:18, "Afternoon","Evening"))))
main_boroughs_temp = main_boroughs_temp[ , -which(names(main_boroughs_temp) %in% c("Avg..Precip.","Record.Low", "Record.High"))]
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, season = ifelse(Month %in% 5:8, "Summer",
ifelse(Month %in% 9:11, "Fall","Winter")))
winter = dplyr::filter(main_boroughs_temp, season == 'Winter')
fall = dplyr::filter(main_boroughs_temp, season == 'Fall')
summer = dplyr::filter(main_boroughs_temp, season == 'Summer')
factor_inattention = main_boroughs_temp[ grep("INATTENTION", main_boroughs_temp$VEHICLE.1.FACTOR),]
tmp_distract = main_boroughs_temp[ grep("DISTRACTION", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_inattention = dplyr::union(tmp_distract, factor_inattention)
factor_inattention = dplyr::distinct(factor_inattention)
main_boroughs_temp = dplyr::filter(main_boroughs_temp,
VEHICLE.1.FACTOR == 'ALCOHOL INVOLVEMENT' |
VEHICLE.1.FACTOR == 'BACKING UNSAFELY' |
VEHICLE.1.FACTOR == 'DRIVER INEXPERIENCE' |
VEHICLE.1.FACTOR == 'DRIVER INATTENTION/DISTRACTION' |
VEHICLE.1.FACTOR == 'TURNING IMPROPERLY' |
VEHICLE.1.FACTOR == 'TRAFFIC CONTROL DISREGARDED' |
VEHICLE.1.FACTOR == 'FAILURE TO YIELD RIGHT-OF-WAY' |
VEHICLE.1.FACTOR == 'FATIGUED/DROWSY' |
VEHICLE.1.FACTOR == 'PRESCRIPTION MEDICATION' |
VEHICLE.1.FACTOR == 'LOST CONSCIOUSNESS')
factor_alcohol = main_boroughs_temp[ grep("ALCOHOL", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_backing = main_boroughs_temp[ grep("BACKING", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_inexperience = main_boroughs_temp[ grep("INEXPERIENCE", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_turning = main_boroughs_temp[ grep("TURNING", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_drowsy = main_boroughs_temp[ grep("DROWSY", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_trafficControl = main_boroughs_temp[ grep("TRAFFIC CONTROL", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_medication = main_boroughs_temp[ grep("MEDICATION", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_consciousness = main_boroughs_temp[ grep("CONSCIOUSNESS", main_boroughs_temp$VEHICLE.1.FACTOR),]
factor_yield = main_boroughs_temp[ grep("FAILURE TO YIELD", main_boroughs_temp$VEHICLE.1.FACTOR),]
all_injured = dplyr::filter(main_boroughs_temp, `PERSONS.INJURED` != 0)
all_killed = dplyr::filter(main_boroughs_temp, `PERSONS.KILLED` != 0)
cyclists = dplyr::filter(main_boroughs_temp, `CYCLISTS.KILLED` != 0 | `CYCLISTS.INJURED` != 0)
cyclists_injured = dplyr::filter(main_boroughs_temp, `CYCLISTS.INJURED` != 0)
cyclists_killed = dplyr::filter(main_boroughs_temp, `CYCLISTS.KILLED` != 0)
motorists = dplyr::filter(main_boroughs_temp, `MOTORISTS.KILLED` != 0 | `MOTORISTS.INJURED` != 0)
motorists_injured = dplyr::filter(main_boroughs_temp, `MOTORISTS.INJURED` != 0)
motorists_killed = dplyr::filter(main_boroughs_temp, `MOTORISTS.KILLED` != 0)
pedestrians = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.KILLED` != 0 | `PEDESTRIANS.INJURED` != 0)
pedestrians_injured = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.INJURED` != 0)
pedestrians_killed = dplyr::filter(main_boroughs_temp, `PEDESTRIANS.KILLED` != 0)
write.csv("Data1.csv")
write.csv(file = "Data1.csv")
View(main_boroughs_temp)
View(main_boroughs_temp)
View(cyclists)
write.csv(cyclists, file = "cyclist.csv")
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, cyclists = CYCLISTS.INJURED+CYCLISTS.KILLED)
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, motorists = MOTORISTS.INJURED+MOTORISTS.KILLED)
main_boroughs_temp = dplyr::mutate(main_boroughs_temp, pedestrians = PEDESTRIANS.INJURED+PEDESTRIANS.KILLED)
write.csv(main_boroughs_temp, file = "Data1.csv")
winter = dplyr::filter(main_boroughs_temp, season == 'Winter')
fall = dplyr::filter(main_boroughs_temp, season == 'Fall')
summer = dplyr::filter(main_boroughs_temp, season == 'Summer')
View(summer)
main_boroughs_tempNoZero = dplyr::filter(main_boroughs_temp, cyclists!=0 & motorists!=0 & pedestrians!=0)
View(main_boroughs_tempNoZero)
main_boroughs_tempNoZero = dplyr::filter(main_boroughs_temp, cyclists!=0 | motorists!=0 | pedestrians!=0)
View(main_boroughs_tempNoZero)
